{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["App","now","Date","useState","currentItemName","setCurrentItemName","toString","currentItemExpirationDate","setCurrentItemExpirationDate","name","expirationDate","items","setItems","daysRemaining","days","Math","round","abs","className","onSubmit","event","preventDefault","type","value","onChange","currentTarget","map","item","toLocaleDateString","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2NA0DeA,MAlDf,WACE,IAAMC,EAAM,IAAIC,KAChB,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAkEF,mBAASF,EAAIK,YAA/E,mBAAOC,EAAP,KAAkCC,EAAlC,KACA,EAA0BL,mBAAiB,CACzC,CAACM,KAAM,QAASC,eAAgB,IAAIR,KAAK,eACzC,CAACO,KAAM,SAAUC,eAAgB,IAAIR,KAAK,eAC1C,CAACO,KAAM,UAAWC,eAAgB,IAAIR,KAAK,iBAH7C,mBAAOS,EAAP,KAAcC,EAAd,KAMA,SAASC,EAAcH,GACrB,IACMI,EAAOC,KAAKC,MAAMD,KAAKE,MAAMP,GAAkBT,GADtC,QAEf,MAAM,GAAN,OAAUa,EAAV,SAQF,OACE,sBAAKI,UAAU,MAAf,UACE,uBAAMC,SAPwB,SAACC,GACjCA,EAAMC,iBACNT,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAACF,KAAML,EAAiBM,eAAgB,IAAIR,KAAKK,QAKnE,UACE,uBAAOe,KAAM,OAAQC,MAAOnB,EAAiBoB,SAAU,SAACJ,GAAD,OAAWf,EAAmBe,EAAMK,cAAcF,UACzG,uBAAOD,KAAM,OAAQC,MAAOhB,EAA2BiB,SAAU,SAACJ,GAAD,OAAWZ,EAA6BY,EAAMK,cAAcF,UAC7H,uBAAOD,KAAM,SAAUC,MAAO,WAEhC,wBAAOL,UAAW,mCAAlB,UACE,gCACA,+BACE,sCACA,4CACA,sDAGF,gCACCP,EAAMe,KAAI,SAAAC,GAAI,OACb,+BACE,6BAAKA,EAAKlB,OACV,6BAAKI,EAAcc,EAAKjB,kBACxB,6BAAKiB,EAAKjB,eAAekB,sCCrCjBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCfnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEpH5BtB,M","file":"static/js/main.f7d13887.chunk.js","sourcesContent":["import React, {FormEventHandler, useState} from 'react';\nimport './App.css';\n\ninterface Item {\n  name: string\n  expirationDate: Date\n}\n\nfunction App() {\n  const now = new Date()\n  const [currentItemName, setCurrentItemName] = useState('')\n  const [currentItemExpirationDate, setCurrentItemExpirationDate] = useState(now.toString())\n  const [items, setItems] = useState<Item[]>([\n    {name: 'apple', expirationDate: new Date('2021-05-19')},\n    {name: 'potato', expirationDate: new Date('2021-05-19')},\n    {name: 'bananas', expirationDate: new Date('2021-05-19')},\n  ])\n\n  function daysRemaining(expirationDate: Date): string {\n    const oneDay = 24 * 60 * 60 * 1000\n    const days = Math.round(Math.abs((+expirationDate - +now) / oneDay))\n    return `${days} days`\n  }\n\n  const addItem: FormEventHandler = (event) => {\n    event.preventDefault()\n    setItems([...items, {name: currentItemName, expirationDate: new Date(currentItemExpirationDate)}])\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={addItem}>\n        <input type={'text'} value={currentItemName} onChange={(event) => setCurrentItemName(event.currentTarget.value)}/>\n        <input type={'date'} value={currentItemExpirationDate} onChange={(event) => setCurrentItemExpirationDate(event.currentTarget.value)}/>\n        <input type={'submit'} value={'Add'}/>\n      </form>\n      <table className={'pure-table pure-table-horizontal'}>\n        <thead>\n        <tr>\n          <th>Item</th>\n          <th>Expires in</th>\n          <th>Expiration date</th>\n        </tr>\n        </thead>\n        <tbody>\n        {items.map(item =>\n          <tr>\n            <td>{item.name}</td>\n            <td>{daysRemaining(item.expirationDate)}</td>\n            <td>{item.expirationDate.toLocaleDateString()}</td>\n          </tr>,\n        )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}