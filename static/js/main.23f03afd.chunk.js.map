{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["App","now","Date","useState","currentItemName","setCurrentItemName","currentItemExpirationDate","setCurrentItemExpirationDate","name","expirationDate","items","setItems","className","onSubmit","event","preventDefault","value","placeholder","onChange","currentTarget","style","width","type","label","paginator","rows","field","header","body","row","days","Math","round","abs","expiresIn","toLocaleDateString","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","PrimeReact","ripple","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qQA6DeA,MAhDf,WACE,IAAMC,EAAM,IAAIC,KAChB,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAkEF,mBAASF,GAA3E,mBAAOK,EAAP,KAAkCC,EAAlC,KACA,EAA0BJ,mBAAiB,CACzC,CAACK,KAAM,QAASC,eAAgB,IAAIP,KAAK,eACzC,CAACM,KAAM,SAAUC,eAAgB,IAAIP,KAAK,eAC1C,CAACM,KAAM,UAAWC,eAAgB,IAAIP,KAAK,iBAH7C,mBAAOQ,EAAP,KAAcC,EAAd,KAiBA,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAMC,SAPwB,SAACC,GACjCA,EAAMC,iBACNJ,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAACF,KAAMJ,EAAiBK,eAAgB,IAAIP,KAAKI,QAKnE,SACE,sBAAKM,UAAU,4BAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,cAAC,YAAD,CAAWI,MAAOZ,EAAiBa,YAAY,OAC7CC,SAAU,SAACJ,GAAD,OAAWT,EAAmBS,EAAMK,cAAcH,YAEhE,qBAAKJ,UAAU,gBAAf,SACE,cAAC,WAAD,CAAUI,MAAOV,EAA2BY,SAAU,SAACJ,GAAD,OAAWP,EAA6BO,EAAME,YAEtG,qBAAKJ,UAAU,sBAAsBQ,MAAO,CAACC,MAAM,SAAnD,SACE,cAAC,SAAD,CAAQC,KAAK,SAASC,MAAO,eAInC,qBAAKX,UAAU,OAAf,SACE,eAAC,YAAD,CAAWI,MAAON,EAAOc,WAAS,EAACC,KAAM,GAAzC,UACE,cAAC,SAAD,CAAQC,MAAM,OAAOC,OAAO,OAAOC,KAAM,SAACC,GAAD,OAASA,EAAIrB,QACtD,cAAC,SAAD,CAAQkB,MAAM,YAAYC,OAAO,aAAaC,KAAM,SAACC,GAAD,OA9B5D,SAAmBpB,GACjB,IACMqB,EAAOC,KAAKC,MAAMD,KAAKE,MAAMxB,GAAkBR,GADtC,QAEf,MAAM,GAAN,OAAU6B,EAAV,SA2BmEI,CAAUL,EAAIpB,mBAC3E,cAAC,SAAD,CAAQiB,MAAM,iBAAiBC,OAAO,kBAAkBC,KAAM,SAACC,GAAD,OAASA,EAAIpB,eAAe0B,iCC1ChFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCfnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCAdQ,EAAWC,QAAS,EAEpBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAACgB,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEhH5BxB,M","file":"static/js/main.23f03afd.chunk.js","sourcesContent":["import React, {FormEventHandler, useState} from 'react'\nimport './App.css'\nimport {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport {InputText} from 'primereact/inputtext'\nimport {Calendar} from 'primereact/calendar'\nimport {Button} from 'primereact/button'\n\ninterface Item {\n  name: string\n  expirationDate: Date\n}\n\nfunction App() {\n  const now = new Date()\n  const [currentItemName, setCurrentItemName] = useState('')\n  const [currentItemExpirationDate, setCurrentItemExpirationDate] = useState(now)\n  const [items, setItems] = useState<Item[]>([\n    {name: 'apple', expirationDate: new Date('2021-05-19')},\n    {name: 'potato', expirationDate: new Date('2021-05-19')},\n    {name: 'bananas', expirationDate: new Date('2021-05-19')},\n  ])\n\n  function expiresIn(expirationDate: Date): string {\n    const oneDay = 24 * 60 * 60 * 1000\n    const days = Math.round(Math.abs((+expirationDate - +now) / oneDay))\n    return `${days} days`\n  }\n\n  const addItem: FormEventHandler = (event) => {\n    event.preventDefault()\n    setItems([...items, {name: currentItemName, expirationDate: new Date(currentItemExpirationDate)}])\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={addItem}>\n        <div className=\"p-fluid p-formgrid p-grid\">\n          <div className=\"p-field p-col\">\n            <InputText value={currentItemName} placeholder=\"Item\"\n              onChange={(event) => setCurrentItemName(event.currentTarget.value)}/>\n          </div>\n          <div className=\"p-field p-col\">\n            <Calendar value={currentItemExpirationDate} onChange={(event) => setCurrentItemExpirationDate(event.value as Date)}/>\n          </div>\n          <div className=\"p-field p-col-fixed\" style={{width:'100px'}}>\n            <Button type=\"submit\" label={'Add'}/>\n          </div>\n        </div>\n      </form>\n      <div className=\"card\">\n        <DataTable value={items} paginator rows={10}>\n          <Column field=\"name\" header=\"Item\" body={(row) => row.name}/>\n          <Column field=\"expiresIn\" header=\"Expires in\" body={(row) => expiresIn(row.expirationDate)}/>\n          <Column field=\"expirationDate\" header=\"Expiration date\" body={(row) => row.expirationDate.toLocaleDateString()}/>\n        </DataTable>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\nimport PrimeReact from 'primereact/api'\n\n// enable primereact ripple animations\nPrimeReact.ripple = true\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}