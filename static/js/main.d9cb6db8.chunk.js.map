{"version":3,"sources":["logic/i18n.ts","logic/db.ts","logic/item-names.ts","ui/ItemsPage.tsx","ui/App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["supportedLocales","init","a","firstMatch","navigator","languages","find","lang","some","sl","startsWith","substring","initialPreferredLocale","i18n","use","initReactI18next","lng","parseMissingKeyHandler","key","resources","ja","translation","react","useSuspense","interpolation","escapeValue","addLocale","firstDayOfWeek","dayNames","dayNamesShort","dayNamesMin","monthNames","monthNamesShort","today","dateFormat","switchLocale","newLocale","db","locale","changeLanguage","preferences","update","Database","items","version","stores","Dexie","on","add","id","open","itemNames","ItemsPage","props","preferredLocale","useLiveQuery","get","then","p","toCollection","sortBy","useState","nameSuggestions","setNameSuggestions","currentItemName","setCurrentItemName","DateTime","now","plus","days","toJSDate","currentItemExpirationDate","setCurrentItemExpirationDate","scale","colorScale","Fuse","includeScore","fuse","t","useTranslation","useEffect","undefined","date","Date","percentageLeftBeforeRisk","expirationDate","fromJSDate","diffNow","percentageLeftBeforeRiskCapped","Math","max","min","imagePathWithFallback","name","matches","search","nameToUse","length","item","replaceAll","toLowerCase","process","className","style","flexShrink","value","options","map","l","toUpperCase","optionLabel","onChange","event","i","height","width","src","alt","backgroundColor","hex","top","toRelative","icon","onClick","itemToRemove","delete","onSubmit","preventDefault","addItem","autoHighlight","autoFocus","suggestions","completeMethod","query","limit","r","delay","placeholder","touchUI","type","label","disabled","App","setDb","setInitialPreferredLocale","initI18n","initialPreferredLocale_","initDb","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","PrimeReact","ripple","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uZAMaA,EAAmB,CAAC,KAAM,MAGhC,SAAeC,IAAtB,+B,4CAAO,gCAAAC,EAAA,6DACCC,EADD,UACcC,UAAUC,UAAUC,MAAK,SAAAC,GAAI,OAAIP,EAAiBQ,MAAK,SAAAC,GAAE,OAAIF,EAAKG,WAAWD,gBAD3F,aACc,EAAoFE,UAAU,EAAG,GAC9GC,EAAyBT,GAAcH,EAAiB,GAFzD,SAICa,IACHC,IAAIC,KACJd,KAAK,CACJe,IAAKJ,EACLK,uBAAwB,SAACC,GAAD,OAASA,GACjCC,UAAW,CAACC,GAAI,CAACC,YAAaD,IAC9BE,MAAO,CAACC,aAAa,GACrBC,cAAe,CAACC,aAAa,KAX5B,cAcLC,oBAAU,KAAM,CACdC,eAAgB,EAChBC,SAAU,CAAC,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,sBACrDC,cAAe,CAAC,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,gBACpDC,YAAa,CAAC,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,UAC5CC,WAAY,CAAC,UAAM,UAAM,UAAM,UAAM,UAAM,UAAM,UAAM,UAAM,UAAM,WAAO,WAAO,YACjFC,gBAAiB,CAAC,UAAM,UAAM,UAAM,UAAM,UAAM,UAAM,UAAM,UAAM,UAAM,WAAO,WAAO,YACtFC,MAAO,eACPC,WAAY,aAtBT,kBAyBEtB,GAzBF,4C,sBA4BA,SAAeuB,EAAtB,oC,4CAAO,WAA4BC,EAA4BC,GAAxD,SAAAnC,EAAA,6DACLoC,iBAAOF,GADF,SAECvB,IAAK0B,eAAeH,GAFrB,uBAGCC,EAAGG,YAAYC,OAAO,EAAG,CAACH,OAAQF,IAHnC,4C,+CCvBMM,EAAb,kDAIE,aAAe,IAAD,8BACZ,cAAM,WAJRC,WAGc,IAFdH,iBAEc,EAEZ,EAAKI,QAAQ,GAAGC,OAAO,CACrBF,MAAM,yDAINH,YAAY,iBAPF,EAJhB,U,MAA8BM,SAiBvB,SAAS7C,EAAKW,GACnB,IAAMyB,EAAK,IAAIK,EAGf,OAFAL,EAAGU,GAAG,YAAY,kBAAMV,EAAGG,YAAYQ,IAAI,CAACC,GAAI,EAAGX,OAAQ1B,OAC3DyB,EAAGa,OACIb,E,4DCnCIc,EAAY,CACvB,eACA,gBACA,mBACA,gBACA,SACA,iBACA,UACA,UACA,aACA,YACA,YACA,gBACA,SACA,QACA,OACA,iBACA,eACA,cACA,kBACA,uBACA,iBACA,sBACA,gBACA,aACA,iBACA,cACA,YACA,WACA,SACA,4BACA,aACA,WACA,iBACA,mBACA,mBACA,WACA,aACA,SACA,iBACA,cACA,iBACA,gBACA,SACA,YACA,aACA,oBACA,yBACA,qBACA,wBACA,gBACA,yBACA,WACA,eACA,YACA,iBACA,OACA,SACA,UACA,mBACA,WACA,eACA,aACA,YACA,eACA,kBACA,kBACA,OACA,kBACA,YACA,WACA,uBACA,iBACA,SACA,0BACA,gBACA,aACA,aACA,WACA,SACA,eACA,gBACA,iBACA,gBACA,mBACA,gBACA,mBACA,eACA,SACA,cACA,yBACA,qBACA,mBACA,sBACA,oBACA,wBACA,gBACA,cACA,uBACA,uBACA,qBACA,kBACA,kBACA,OACA,mBACA,WACA,MACA,uBACA,UACA,gBACA,SACA,WACA,eACA,iBACA,WACA,gBACA,WACA,OACA,aACA,oBACA,gBACA,aACA,YACA,aACA,qBACA,SACA,yBACA,UACA,mBACA,cACA,gBACA,OACA,aACA,UACA,eACA,aACA,MACA,OACA,cACA,qBACA,uBACA,UACA,mBACA,UACA,UACA,kBACA,QACA,SACA,kBACA,gBACA,eACA,iBACA,mBACA,cACA,WACA,OACA,iBACA,kBACA,UACA,aACA,aACA,UACA,gBACA,qBACA,kBACA,gBACA,YACA,gBACA,iBACA,YACA,iBACA,oBACA,kBACA,cACA,aACA,YACA,iBACA,oBACA,kBACA,kBACA,YACA,sBACA,mBACA,oBACA,oBACA,qBACA,qBACA,OACA,gBACA,UACA,WACA,cACA,gBACA,WACA,MACA,OACA,UACA,yBACA,gBACA,UACA,WACA,kBACA,uBACA,WACA,iBACA,WACA,mBACA,UACA,eACA,gBACA,SACA,aACA,wBACA,aACA,YACA,gBACA,uBACA,eACA,cACA,OACA,QACA,YACA,SACA,kCACA,mCACA,UACA,QACA,WACA,SACA,aACA,aACA,oBACA,WACA,QACA,eACA,eACA,cACA,eACA,WACA,qBACA,gBACA,qBACA,eACA,gBACA,uBACA,gBACA,qBACA,Y,uBCzOWC,EAAyE,SAACC,GACrF,IAAMC,EAAkBC,wBAAa,kBAAMF,EAAMhB,GAAGG,YAAYgB,IAAI,GAAGC,MAAK,SAAAC,GAAC,OAAIA,EAAGpB,aAC9EK,EAAQY,wBAAa,kBAAMF,EAAMhB,GAAGM,MAAMgB,eAAeC,OAAO,mBAAqB,MAC3F,EAA8CC,mBAAmBV,GAAjE,mBAAOW,EAAP,KAAwBC,EAAxB,KACA,EAA8CF,mBAAiB,IAA/D,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAAkEJ,mBAAeK,WAASC,MAAMC,KAAK,CAACC,KAAM,IAAIC,YAAhH,mBAAOC,EAAP,KAAkCC,EAAlC,KACA,EAAqBX,oBAAgB,kBAAMY,gBAAM,CAAC,OAAQ,YAAnDC,EAAP,oBACA,EAAeb,mBAAuB,IAAIc,IAAKxB,EAAW,CAACyB,cAAc,KAAlEC,EAAP,oBACOC,EAAKC,cAALD,EAYP,GAVAE,qBAAU,WACR,sBAAC,sBAAA9E,EAAA,8DACyB+E,IAApB3B,EADL,gCAESnB,EAAamB,EAAiBD,EAAMhB,IAF7C,OAIGmC,GAA6B,SAAAU,GAAI,OAAI,IAAIC,KAAKD,MAJjD,0CAAD,KAOC,CAAC5B,EAAiBD,EAAMhB,UAEH4C,IAApB3B,EACF,OAAO,6BAaT,SAAS8B,EAAyBC,GAChC,OAAOnB,WAASoB,WAAWD,GAAgBE,QAAQ,QAAQlB,KAAO,GAGpE,SAASmB,EAA+BH,GACtC,OAA8E,IAAvEI,KAAKC,IAAID,KAAKE,IAAIP,EAAyBC,GAAiB,GAAI,IAOzE,SAASO,EAAsBC,GAC7B,IAAMC,EAAUjB,EAAKkB,OAAOF,GACtBG,EAAYF,EAAQG,OAAS,EAAIH,EAAQ,GAAGI,KAAKC,WAAW,IAAK,KAAKC,cAAgB,eAC5F,MAAM,GAAN,OAAUC,UAAV,kCAA0DL,EAA1D,YAAuEA,EAAvE,QAOF,OACE,sBAAKM,UAAU,oCAAf,UACE,cAAC,eAAD,CACEC,MAAO,CAACC,WAAY,GACpBF,UAAW,2BACXG,MAAOnD,EAAiBoD,QAAS1G,EAAiB2G,KAAI,SAAAC,GAAC,MAAK,CAACf,KAAMe,EAAEC,cAAeJ,MAAOG,MAAME,YAAY,OAC7GC,SAAU,SAACC,GAAD,OAAWA,EAAMP,OAASpD,EAAMhB,GAAGG,YAAYC,OAAO,EAAG,CAACH,OAAQ0E,EAAMP,WACpF,qBAAKH,UAAU,2BAAf,gBACG3D,QADH,IACGA,OADH,EACGA,EAAOgE,KAAI,SAACT,EAAMe,GAAP,OACV,sBAAKX,UAAW,yCAAhB,UACE,qBACEA,UAAW,SAAUY,OAAQ,GAAIC,MAAO,GACxCC,IAAKxB,EAAsBM,EAAKL,MAChCwB,IAAI,KACN,sBAAKf,UAAW,qCAAhB,UACE,qBACEA,UAAW,sBAAuBC,MAAO,CACzCe,iBA/BKjC,EA+BsBa,EAAKb,eA9BrCX,EAAWe,KAAKC,IAAIN,EAAyBC,GAAiB,KA8BTkC,MAChDJ,MAAO3B,EAA+BU,EAAKb,gBAAkB,KAH/D,SAIG,sBACDiB,UAAW,YACXC,MAAO,CAACiB,IAAyB,OAApBlE,GAA4B,EAAI,GAF5C,SAEiDY,WAASoB,WAAWY,EAAKb,gBAAgBoC,WAAW,CAACnF,OAAQgB,KAAqB,QAEtI,sBAAMgD,UAAW,cAAjB,SAAiCJ,EAAKL,UAExC,cAAC,SAAD,CAAQ6B,KAAK,cAAcpB,UAAU,qDAAqDqB,QAAS,kBAnDzFC,EAmD0G1B,OAlD5H7C,EAAMhB,GAAGM,MAAMkF,OAAOD,EAAa3E,IADrC,IAAoB2E,OAmCmDX,GAvBvE,IAAmB5B,OA2Cf,uBAAMyC,SAAU,SAACd,GAAD,OA7DpB,SAAiBA,GACfA,EAAMe,iBACN1E,EAAMhB,GAAGM,MAAMK,IAAI,CAAC6C,KAAM7B,EAAiBqB,eAAgBd,IAC3DN,EAAmB,IA0DU+D,CAAQhB,IAAQV,UAAU,kBAAkBC,MAAO,CAACC,WAAY,GAA3F,UACE,cAAC,eAAD,CACEyB,eAAe,EAAMC,WAAW,EAChCC,YAAarE,EAAiBsE,eApCtC,SAAyBpB,GACvBjD,EAAmBc,EAAKkB,OAAOiB,EAAMqB,MAAO,CAACC,MAAO,IAAI3B,KAAI,SAAA4B,GAAC,OAAIA,EAAErC,UAmCEsC,MAAO,EACtElC,UAAW,qBACXG,MAAOzC,EAAiByE,YAAa3D,EAAE,QACvCiC,SAAU,SAACC,GAAD,OAAW/C,EAAmB+C,EAAMP,UAChD,cAAC,WAAD,CACEH,UAAW,qBACXoC,SAAO,EAACjC,MAAOlC,EACfwC,SAAU,SAACC,GAAD,OAAWxC,EAA6BwC,EAAMP,UAC1D,cAAC,SAAD,CAAQkC,KAAK,SAASC,MAAO,MAAOC,SAA8B,KAApB7E,WCxGzC8E,EAAU,WACrB,MAAoBjF,qBAApB,mBAAOxB,EAAP,KAAW0G,EAAX,KACA,EAA4DlF,qBAA5D,mBAAOjD,EAAP,KAA+BoI,EAA/B,KAUA,OARAhE,qBAAU,WACR,sBAAC,4BAAA9E,EAAA,sEACuC+I,IADvC,OACOC,EADP,OAECF,EAA0BE,GAC1BH,EAAMI,EAAOD,IAHd,0CAAD,KAKC,SAEQjE,IAAP5C,QAA+C4C,IAA3BrE,EACf,6BAGF,cAAC,EAAD,CAAWyB,GAAIA,EAAIzB,uBAAwBA,KCVhCwI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCfnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBlG,MAAK,YAAkD,IAA/CmG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAAWC,QAAS,EAEpBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFqHpB,kBAAmBnK,WACrBA,UAAUoK,cAAcC,MACrBhH,MAAK,SAACiH,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEhH5BtB,M","file":"static/js/main.d9cb6db8.chunk.js","sourcesContent":["import i18n from 'i18next'\nimport {initReactI18next} from 'react-i18next'\nimport ja from '../locales/ja/translation.json'\nimport {addLocale, locale} from 'primereact/api'\nimport {Database} from './db'\n\nexport const supportedLocales = ['en', 'ja']\nexport type SupportedLocale = typeof supportedLocales[number]\n\nexport async function init(): Promise<SupportedLocale> {\n  const firstMatch = navigator.languages.find(lang => supportedLocales.some(sl => lang.startsWith(sl)))?.substring(0, 2)\n  const initialPreferredLocale = firstMatch || supportedLocales[0]\n\n  await i18n\n    .use(initReactI18next)\n    .init({\n      lng: initialPreferredLocale,\n      parseMissingKeyHandler: (key) => key,\n      resources: {ja: {translation: ja}},\n      react: {useSuspense: false},\n      interpolation: {escapeValue: false},\n    })\n\n  addLocale('ja', {\n    firstDayOfWeek: 1,\n    dayNames: ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'],\n    dayNamesShort: ['日曜', '月曜', '火曜', '水曜', '木曜', '金曜', '土曜'],\n    dayNamesMin: ['日', '月', '火', '水', '木', '金', '土'],\n    monthNames: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],\n    monthNamesShort: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],\n    today: '今日',\n    dateFormat: 'yy/mm/dd',\n  })\n\n  return initialPreferredLocale\n}\n\nexport async function switchLocale(newLocale: SupportedLocale, db: Database): Promise<void> {\n  locale(newLocale)\n  await i18n.changeLanguage(newLocale)\n  await db.preferences.update(0, {locale: newLocale})\n}\n","import Dexie, {Table} from 'dexie';\nimport {SupportedLocale} from './i18n'\n\nexport interface Item {\n  id?: number\n  name: string\n  expirationDate: Date\n}\n\nexport interface Preference {\n  id: number\n  locale: SupportedLocale\n}\n\nexport class Database extends Dexie {\n  items!: Table<Item>;\n  preferences!: Table<Preference>\n\n  constructor() {\n    super('0waste');\n    this.version(1).stores({\n      items: `\n        ++id,\n        name,\n        expirationDate`,\n      preferences: `\n        id`,\n    })\n  }\n}\n\nexport function init(initialPreferredLocale: SupportedLocale): Database {\n  const db = new Database()\n  db.on('populate', () => db.preferences.add({id: 0, locale: initialPreferredLocale}))\n  db.open()\n  return db\n}\n","export const itemNames = [\n  'Acorn squash',\n  'Adjuma pepper',\n  'Aji dulce pepper',\n  'Aleppo pepper',\n  'Almond',\n  'Anaheim pepper',\n  'Apricot',\n  'Arugula',\n  'Asian pear',\n  'Asparagus',\n  'Atrichoke',\n  'Banana pepper',\n  'Barley',\n  'Basil',\n  'Beet',\n  'Belgian endive',\n  'Bibb lettuce',\n  'Bing cherry',\n  'Birds eye chili',\n  'Bishops crown pepper',\n  'Black habanero',\n  'Black prince tomato',\n  'Black salsify',\n  'Blackberry',\n  'Blue lake bean',\n  'Blue oyster',\n  'Blueberry',\n  'Bok choy',\n  'Borage',\n  'Brazilian starfish pepper',\n  'Broad bean',\n  'Broccoli',\n  'Brussel sprout',\n  'Butternut squash',\n  'California poppy',\n  'Cannabis',\n  'Cantaloupe',\n  'Carrot',\n  'Cascabel chili',\n  'Cauliflower',\n  'Cayenne pepper',\n  'Celeriac root',\n  'Celery',\n  'Chamomile',\n  'Chantrelle',\n  'Cheongyang pepper',\n  'Cherokee purple tomato',\n  'Cherry bell radish',\n  'Cherry stuffer pepper',\n  'Cherry tomato',\n  'Chile de aborol pepper',\n  'Cilantro',\n  'Cinnamon cap',\n  'Claytonia',\n  'Collard greens',\n  'Corn',\n  'Cotton',\n  'Cremini',\n  'Cubanelle pepper',\n  'Cucumber',\n  'Curly endive',\n  'Curly kale',\n  'Dandelion',\n  'Datil pepper',\n  'Delicata squash',\n  'Diablito pepper',\n  'Dill',\n  'Dundicut pepper',\n  'Echinacea',\n  'Eggplant',\n  'Facing heaven pepper',\n  'Fatilii pepper',\n  'Fennel',\n  'French breakfast radish',\n  'Fresno pepper',\n  'Fuji apple',\n  'Gala apple',\n  'Galangal',\n  'Garlic',\n  'Garlic chive',\n  'Generic apple',\n  'Generic flower',\n  'Generic melon',\n  'Generic mushroom',\n  'Generic plant',\n  'German chamomile',\n  'Ghost pepper',\n  'Ginger',\n  'Golden beet',\n  'Golden delicious apple',\n  'Granny smith apple',\n  'Green anjou pear',\n  'Green bartlett pear',\n  'Green bell pepper',\n  'Green birds eye chili',\n  'Green cabbage',\n  'Green onion',\n  'Green serrano pepper',\n  'Green tabasco pepper',\n  'Green zebra tomato',\n  'Guajillo pepper',\n  'Habanero pepper',\n  'Hemp',\n  'Hillbilly tomato',\n  'Honeydew',\n  'Hop',\n  'Hungarian wax pepper',\n  'Iceberg',\n  'Icicle radish',\n  'Indigo',\n  'Jalapeno',\n  'Japanese yam',\n  'Kabocha squash',\n  'Kholrabi',\n  'Lacianto kale',\n  'Lavender',\n  'Leek',\n  'Lemon balm',\n  'Lemon drop pepper',\n  'Lemon verbena',\n  'Lemongrass',\n  'Lima bean',\n  'Lions mane',\n  'Loose leaf lettuce',\n  'Lovage',\n  'Madame jeanette pepper',\n  'Majoram',\n  'Malagueta pepper',\n  'Marshmallow',\n  'Medusa pepper',\n  'Mint',\n  'Money tree',\n  'Mugwort',\n  'Napa cabbage',\n  'Nectratine',\n  'Oat',\n  'Okra',\n  'Onion chive',\n  'Orange bell pepper',\n  'Orange scotch bonnet',\n  'Oregano',\n  'Ornamental gourd',\n  'Parsley',\n  'Parsnip',\n  'Pattypan squash',\n  'Peach',\n  'Peanut',\n  'Peppadew pepper',\n  'Pequin pepper',\n  'Peter pepper',\n  'Pimento pepper',\n  'Pineapple tomato',\n  'Pink oyster',\n  'Plantain',\n  'Plum',\n  'Poblano pepper',\n  'Pointed cabbage',\n  'Porcino',\n  'Portabello',\n  'Psilocybin',\n  'Pumpkin',\n  'Purple carrot',\n  'Purple cauliflower',\n  'Purple pod bean',\n  'Purple potato',\n  'Radicchio',\n  'Rainbow chard',\n  'Rainier cherry',\n  'Raspberry',\n  'Red anjou pear',\n  'Red bartlett pear',\n  'Red bell pepper',\n  'Red cabbage',\n  'Red carrot',\n  'Red chard',\n  'Red curly kale',\n  'Red giant mustard',\n  'Red gold potato',\n  'Red kuri squash',\n  'Red onion',\n  'Red pointed cabbage',\n  'Red russian kale',\n  'Red savina pepper',\n  'Red scotch bonnet',\n  'Red serrano pepper',\n  'Red tabasco pepper',\n  'Rice',\n  'Rocoto pepper',\n  'Romaine',\n  'Rosemary',\n  'Runner bean',\n  'Russet potato',\n  'Rutabaga',\n  'Rye',\n  'Sage',\n  'Salsify',\n  'Santa fe grande pepper',\n  'Savoy cabbage',\n  'Shallot',\n  'Shiitake',\n  'Shishito pepper',\n  'Siling labuyo pepper',\n  'Snap pea',\n  'Sorghum millet',\n  'Soy bean',\n  'Spaghetti squash',\n  'Spinach',\n  'Spring onion',\n  'St johns wort',\n  'Stevia',\n  'Strawberry',\n  'Striped cavern tomato',\n  'Sugar cane',\n  'Sunflower',\n  'Sunray tomato',\n  'Sweet italian pepper',\n  'Sweet potato',\n  'Swiss chard',\n  'Taro',\n  'Thyme',\n  'Tomatillo',\n  'Tomato',\n  'Trinidad moruga scorpion pepper',\n  'Trinidad scorpion butch t pepper',\n  'Trumpet',\n  'Tulsi',\n  'Turmeric',\n  'Turnip',\n  'Watercress',\n  'Watermelon',\n  'Watermelon radish',\n  'Wax bean',\n  'Wheat',\n  'White button',\n  'White carrot',\n  'White onion',\n  'White oyster',\n  'Wormwood',\n  'Yellow bell pepper',\n  'Yellow carrot',\n  'Yellow cauliflower',\n  'Yellow onion',\n  'Yellow oyster',\n  'Yellow scotch bonnet',\n  'Yellow squash',\n  'Youkon gold potato',\n  'Zucchini',\n]\n","import {Color, Scale, scale} from 'chroma-js'\nimport React, {FC, FormEvent, useEffect, useState} from 'react'\nimport {Database, Item} from '../logic/db'\nimport {DateTime} from 'luxon'\nimport {SelectButton} from 'primereact/selectbutton'\nimport {SupportedLocale, supportedLocales, switchLocale} from '../logic/i18n'\nimport {Button} from 'primereact/button'\nimport {Calendar} from 'primereact/calendar'\nimport {useLiveQuery} from 'dexie-react-hooks'\nimport {useTranslation} from 'react-i18next'\nimport {itemNames} from '../logic/item-names'\nimport {AutoComplete} from 'primereact/autocomplete'\nimport Fuse from 'fuse.js'\n\nexport const ItemsPage: FC<{db: Database; initialPreferredLocale: SupportedLocale}> = (props) => {\n  const preferredLocale = useLiveQuery(() => props.db.preferences.get(0).then(p => p!.locale))\n  const items = useLiveQuery(() => props.db.items.toCollection().sortBy('expirationDate') || [])\n  const [nameSuggestions, setNameSuggestions] = useState<string[]>(itemNames)\n  const [currentItemName, setCurrentItemName] = useState<string>('')\n  const [currentItemExpirationDate, setCurrentItemExpirationDate] = useState<Date>(DateTime.now().plus({days: 3}).toJSDate())\n  const [colorScale] = useState<Scale>(() => scale(['#f00', '#0f0']))\n  const [fuse] = useState<Fuse<string>>(new Fuse(itemNames, {includeScore: false}))\n  const {t} = useTranslation()\n\n  useEffect(() => {\n    (async () => {\n      if (preferredLocale !== undefined) {\n        await switchLocale(preferredLocale, props.db)\n        // calendar doesn't update; force a refresh by cloning the value\n        setCurrentItemExpirationDate(date => new Date(date))\n      }\n    })()\n  }, [preferredLocale, props.db])\n\n  if (preferredLocale === undefined) {\n    return <></>\n  }\n\n  function addItem(event: FormEvent) {\n    event.preventDefault()\n    props.db.items.add({name: currentItemName, expirationDate: currentItemExpirationDate})\n    setCurrentItemName('')\n  }\n\n  function removeItem(itemToRemove: Item) {\n    props.db.items.delete(itemToRemove.id!)\n  }\n\n  function percentageLeftBeforeRisk(expirationDate: Date): number {\n    return DateTime.fromJSDate(expirationDate).diffNow('days').days / 10\n  }\n\n  function percentageLeftBeforeRiskCapped(expirationDate: Date): number {\n    return Math.max(Math.min(percentageLeftBeforeRisk(expirationDate), 1), 0.2) * 100\n  }\n\n  function riskColor(expirationDate: Date): Color {\n    return colorScale(Math.max(percentageLeftBeforeRisk(expirationDate), 0))\n  }\n\n  function imagePathWithFallback(name: string): string {\n    const matches = fuse.search(name)\n    const nameToUse = matches.length > 0 ? matches[0].item.replaceAll(' ', '-').toLowerCase() : 'acorn-squash'\n    return `${process.env.PUBLIC_URL}/open-crop-icons/icons/${nameToUse}/${nameToUse}.svg`\n  }\n\n  function suggestItemName(event: {query: string}) {\n    setNameSuggestions(fuse.search(event.query, {limit: 5}).map(r => r.item))\n  }\n\n  return (\n    <div className=\"root p-d-flex p-flex-column p-p-2\">\n      <SelectButton\n        style={{flexShrink: 0}}\n        className={'p-mb-2 p-d-flex p-jc-end'}\n        value={preferredLocale} options={supportedLocales.map(l => ({name: l.toUpperCase(), value: l}))} optionLabel=\"name\"\n        onChange={(event) => event.value && props.db.preferences.update(0, {locale: event.value})}/>\n      <div className=\"p-mb-2 items p-flex-grow\">\n        {items?.map((item, i) =>\n          <div className={'item p-p-2 p-mb-2 p-d-flex p-ai-center'} key={i}>\n            <img\n              className={'p-mr-2'} height={40} width={40}\n              src={imagePathWithFallback(item.name)}\n              alt=\"\"/>\n            <div className={'p-d-flex p-flex-column p-flex-grow'}>\n              <div\n                className={'riskbar p-flex-grow'} style={{\n                backgroundColor: riskColor(item.expirationDate).hex(),\n                width: percentageLeftBeforeRiskCapped(item.expirationDate) + '%',\n              }}><span\n                className={'days-left'}\n                style={{top: preferredLocale === 'ja' ? -2 : 1}}>{DateTime.fromJSDate(item.expirationDate).toRelative({locale: preferredLocale}) || '?'}</span>\n              </div>\n              <span className={'p-mt-1 name'}>{item.name}</span>\n            </div>\n            <Button icon=\"pi pi-times\" className=\"p-button-rounded p-button-danger p-button-outlined\" onClick={() => removeItem(item)}/>\n          </div>,\n        )}\n      </div>\n      <form onSubmit={(event) => addItem(event)} className=\"footer p-d-flex\" style={{flexShrink: 0}}>\n        <AutoComplete\n          autoHighlight={true} autoFocus={true}\n          suggestions={nameSuggestions} completeMethod={suggestItemName} delay={0}\n          className={'p-flex-grow p-mr-2'}\n          value={currentItemName} placeholder={t('Item')}\n          onChange={(event) => setCurrentItemName(event.value)}/>\n        <Calendar\n          className={'p-flex-grow p-mr-2'}\n          touchUI value={currentItemExpirationDate}\n          onChange={(event) => setCurrentItemExpirationDate(event.value as Date)}/>\n        <Button type=\"submit\" label={'Add'} disabled={currentItemName === ''}/>\n      </form>\n    </div>\n  )\n}\n","import React, {FC, useEffect, useState} from 'react'\nimport './App.scss'\nimport {init as initI18n, SupportedLocale} from '../logic/i18n'\nimport {Database, init as initDb} from '../logic/db'\nimport {ItemsPage} from './ItemsPage'\n\nexport const App: FC = () => {\n  const [db, setDb] = useState<Database>()\n  const [initialPreferredLocale, setInitialPreferredLocale] = useState<SupportedLocale>()\n\n  useEffect(() => {\n    (async () => {\n      const initialPreferredLocale_ = await initI18n()\n      setInitialPreferredLocale(initialPreferredLocale_)\n      setDb(initDb(initialPreferredLocale_))\n    })()\n  }, [])\n\n  if (db === undefined || initialPreferredLocale === undefined) {\n    return <></>\n  }\n\n  return <ItemsPage db={db} initialPreferredLocale={initialPreferredLocale}/>\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport {App} from './ui/App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\nimport PrimeReact from 'primereact/api'\n\n// enable primereact ripple animations\nPrimeReact.ripple = true\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}