{"version":3,"sources":["logic/i18n.ts","ui/App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["i18n","use","initReactI18next","init","parseMissingKeyHandler","key","resources","ja","translation","react","useSuspense","interpolation","escapeValue","addLocale","firstDayOfWeek","dayNames","dayNamesShort","dayNamesMin","monthNames","monthNamesShort","today","dateFormat","supportedLanguages","colorScale","scale","App","inThreeDays","DateTime","now","plus","days","toJSDate","useState","currentItemName","setCurrentItemName","currentItemExpirationDate","setCurrentItemExpirationDate","name","expirationDate","fromISO","items","setItems","firstMatch","navigator","languages","find","lang","some","sl","startsWith","substring","preferredLocale","setPreferredLocale","useTranslation","t","useEffect","locale","changeLanguage","date","Date","percentageLeftBeforeRisk","diffNow","percentageLeftBeforeRiskCapped","Math","max","min","tryImagePath","lowercasedName","toLowerCase","process","className","style","flexShrink","value","options","map","l","toUpperCase","optionLabel","onChange","event","item","i","height","width","src","onError","currentTarget","backgroundColor","hex","top","toRelative","onSubmit","preventDefault","newItems","fromJSDate","sort","a","b","placeholder","touchUI","type","label","disabled","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","PrimeReact","ripple","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00a88d9e.chunk.js","sourcesContent":["import i18n from 'i18next'\nimport {initReactI18next} from 'react-i18next'\nimport ja from '../locales/ja/translation.json'\nimport {addLocale} from 'primereact/api'\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    parseMissingKeyHandler: (key) => key,\n    resources: {ja: {translation: ja}},\n    react: {useSuspense: false},\n    interpolation: {escapeValue: false},\n  })\n\naddLocale('ja', {\n  firstDayOfWeek: 1,\n  dayNames: ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'],\n  dayNamesShort: ['日曜', '月曜', '火曜', '水曜', '木曜', '金曜', '土曜'],\n  dayNamesMin: ['日', '月', '火', '水', '木', '金', '土'],\n  monthNames: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],\n  monthNamesShort: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],\n  today: '今日',\n  dateFormat: 'yy/mm/dd',\n})\n\nexport const supportedLanguages = ['en', 'ja']\n","import React, {FC, FormEventHandler, useEffect, useState} from 'react'\nimport './App.scss'\nimport {InputText} from 'primereact/inputtext'\nimport {Calendar} from 'primereact/calendar'\nimport {Button} from 'primereact/button'\nimport {locale} from 'primereact/api'\nimport {SelectButton} from 'primereact/selectbutton'\nimport {useTranslation} from 'react-i18next'\nimport {DateTime} from 'luxon'\nimport {supportedLanguages} from '../logic/i18n'\nimport {Color, scale} from 'chroma-js'\n\nconst colorScale = scale(['#f00', '#0f0'])\nconst fallbackImagePath = process.env.PUBLIC_URL + '/open-crop-icons/icons/acorn-squash/acorn-squash.svg'\n\nexport const App: FC = () => {\n  const inThreeDays = DateTime.now().plus({days: 3}).toJSDate()\n  const [currentItemName, setCurrentItemName] = useState<string>('')\n  const [currentItemExpirationDate, setCurrentItemExpirationDate] = useState<Date>(inThreeDays)\n  const [items, setItems] = useState<Item[]>([\n    {name: 'apple', expirationDate: DateTime.fromISO('2021-05-19')},\n    {name: 'potato', expirationDate: DateTime.fromISO('2021-05-19')},\n    {name: 'bananas', expirationDate: DateTime.fromISO('2021-05-19')},\n  ])\n  const firstMatch = navigator.languages.find(lang => supportedLanguages.some(sl => lang.startsWith(sl)))?.substring(0, 2)\n  const [preferredLocale, setPreferredLocale] = useState<string>(firstMatch || supportedLanguages[0])\n  const {t, i18n} = useTranslation();\n\n  useEffect(() => {\n    locale(preferredLocale)\n    i18n.changeLanguage(preferredLocale)\n    // calendar doesn't update; force a refresh by cloning the value\n    setCurrentItemExpirationDate(date => new Date(date))\n  }, [preferredLocale, i18n])\n\n  const addItem: FormEventHandler = (event) => {\n    event.preventDefault()\n    const newItems = [...items, {name: currentItemName, expirationDate: DateTime.fromJSDate(currentItemExpirationDate)}]\n    newItems.sort((a, b) => a.expirationDate < b.expirationDate ? -1 : a.expirationDate > b.expirationDate ? 1 : 0)\n    setItems(newItems)\n    setCurrentItemName('')\n  }\n\n  function percentageLeftBeforeRisk(expirationDate: DateTime): number {\n    return expirationDate.diffNow('days').days / 10\n  }\n\n  function percentageLeftBeforeRiskCapped(expirationDate: DateTime): number {\n    return Math.max(Math.min(percentageLeftBeforeRisk(expirationDate), 1), 0.2) * 100\n  }\n\n  function riskColor(expirationDate: DateTime): Color {\n    return colorScale(Math.max(percentageLeftBeforeRisk(expirationDate), 0))\n  }\n\n  function tryImagePath(name: string): string {\n    const lowercasedName = name.toLowerCase()\n    return `${process.env.PUBLIC_URL}/open-crop-icons/icons/${lowercasedName}/${lowercasedName}.svg`\n  }\n\n  return (\n    <div className=\"root p-d-flex p-flex-column p-p-2\">\n      <SelectButton\n        style={{flexShrink: 0}}\n        className={'p-mb-2 p-d-flex p-jc-end'}\n        value={preferredLocale} options={supportedLanguages.map(l => ({name: l.toUpperCase(), value: l}))} optionLabel=\"name\"\n        onChange={(event) => event.value && setPreferredLocale(event.value)}/>\n      <div className=\"p-mb-2 items p-flex-grow\">\n        {items.map((item, i) =>\n          <div className={'item p-p-2 p-mb-2 p-d-flex p-ai-center'} key={i}>\n            <img\n              className={'p-mr-2'} height={40} width={40}\n              src={tryImagePath(item.name)}\n              onError={(event) => event.currentTarget.src = fallbackImagePath}/>\n            <div className={'p-d-flex p-flex-column p-flex-grow'}>\n              <div\n                className={'riskbar p-flex-grow'} style={{\n                backgroundColor: riskColor(item.expirationDate).hex(),\n                width: percentageLeftBeforeRiskCapped(item.expirationDate) + '%',\n              }}><span\n                className={'days-left'}\n                style={{top: preferredLocale === 'ja' ? -2 : 1}}>{item.expirationDate.toRelative({locale: preferredLocale}) || '?'}</span>\n              </div>\n              <span className={'p-mt-1 name'}>{item.name}</span>\n            </div>\n          </div>,\n        )}\n      </div>\n      <form onSubmit={addItem} className=\"footer p-d-flex\" style={{flexShrink: 0}}>\n        <InputText\n          className={'p-flex-grow p-mr-2'}\n          value={currentItemName} placeholder={t('Item')}\n          onChange={(event) => setCurrentItemName(event.currentTarget.value)}/>\n        <Calendar\n          className={'p-flex-grow p-mr-2'}\n          touchUI value={currentItemExpirationDate}\n          onChange={(event) => setCurrentItemExpirationDate(event.value as Date)}/>\n        <Button type=\"submit\" label={'Add'} disabled={currentItemName === ''}/>\n      </form>\n    </div>\n  )\n}\n\ninterface Item {\n  name: string\n  expirationDate: DateTime\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport {App} from './ui/App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\nimport PrimeReact from 'primereact/api'\nimport './logic/i18n'\n\n// enable primereact ripple animations\nPrimeReact.ripple = true\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}