{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["addLocale","firstDayOfWeek","dayNames","dayNamesShort","dayNamesMin","monthNames","monthNamesShort","today","dateFormat","App","now","Date","useState","currentItemName","setCurrentItemName","currentItemExpirationDate","setCurrentItemExpirationDate","name","expirationDate","items","setItems","firstMatch","navigator","languages","find","lang","startsWith","preferredLocale","setPreferredLocale","useTranslation","t","i18n","useEffect","locale","changeLanguage","className","value","options","optionLabel","onChange","event","paginator","rows","field","header","body","row","days","Math","round","abs","expiresIn","toLocaleDateString","onSubmit","preventDefault","placeholder","currentTarget","style","width","type","label","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","PrimeReact","ripple","use","LanguageDetector","initReactI18next","init","debug","parseMissingKeyHandler","key","resources","ja","translation","react","useSuspense","interpolation","escapeValue","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46034b38.chunk.js","sourcesContent":["import React, {FC, FormEventHandler, useEffect, useState} from 'react'\nimport './App.css'\nimport {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport {InputText} from 'primereact/inputtext'\nimport {Calendar} from 'primereact/calendar'\nimport {Button} from 'primereact/button'\nimport {addLocale, locale} from 'primereact/api'\nimport {SelectButton} from 'primereact/selectbutton'\nimport {useTranslation} from 'react-i18next'\n\naddLocale('ja', {\n  firstDayOfWeek: 1,\n  dayNames: ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'],\n  dayNamesShort: ['日曜', '月曜', '火曜', '水曜', '木曜', '金曜', '土曜'],\n  dayNamesMin: ['日', '月', '火', '水', '木', '金', '土'],\n  monthNames: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],\n  monthNamesShort: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],\n  today: '今日',\n  dateFormat: 'yy/mm/dd',\n})\n\nexport const App: FC = () => {\n  const now = new Date()\n  const [currentItemName, setCurrentItemName] = useState('')\n  const [currentItemExpirationDate, setCurrentItemExpirationDate] = useState(now)\n  const [items, setItems] = useState<Item[]>([\n    {name: 'apple', expirationDate: new Date('2021-05-19')},\n    {name: 'potato', expirationDate: new Date('2021-05-19')},\n    {name: 'bananas', expirationDate: new Date('2021-05-19')},\n  ])\n  const firstMatch = navigator.languages.find(lang => lang.startsWith('en') || lang.startsWith('ja'))\n  const [preferredLocale, setPreferredLocale] = useState(firstMatch || 'en')\n  const {t, i18n} = useTranslation();\n\n  useEffect(() => {\n    locale(preferredLocale)\n    i18n.changeLanguage(preferredLocale)\n  }, [preferredLocale])\n\n  function expiresIn(expirationDate: Date): string {\n    const oneDay = 24 * 60 * 60 * 1000\n    const days = Math.round(Math.abs((+expirationDate - +now) / oneDay))\n    return `${days} days`\n  }\n\n  const addItem: FormEventHandler = (event) => {\n    event.preventDefault()\n    setItems([...items, {name: currentItemName, expirationDate: new Date(currentItemExpirationDate)}])\n  }\n\n  const languages = [\n    {name: 'EN', value: 'en'},\n    {name: 'JP', value: 'ja'},\n  ]\n\n  return (\n    <div className=\"App\">\n      <SelectButton\n        className={'p-mb-2 p-d-flex p-jc-end'}\n        value={preferredLocale} options={languages} optionLabel=\"name\"\n        onChange={(event) => setPreferredLocale(event.value)}/>\n      <div className=\"card p-mb-2\">\n        <DataTable value={items} paginator rows={10}>\n          <Column field=\"name\" header={t('Item')} body={(row) => row.name}/>\n          <Column field=\"expiresIn\" header={t('Expires in')} body={(row) => expiresIn(row.expirationDate)}/>\n          <Column field=\"expirationDate\" header={t('Expiration date')} body={(row) => row.expirationDate.toLocaleDateString()}/>\n        </DataTable>\n      </div>\n      <form onSubmit={addItem}>\n        <div className=\"p-fluid p-formgrid p-grid\">\n          <div className=\"p-field p-col\">\n            <InputText\n              value={currentItemName} placeholder=\"Item\"\n              onChange={(event) => setCurrentItemName(event.currentTarget.value)}/>\n          </div>\n          <div className=\"p-field p-col\">\n            <Calendar value={currentItemExpirationDate} onChange={(event) => setCurrentItemExpirationDate(event.value as Date)}/>\n          </div>\n          <div className=\"p-field p-col-fixed\" style={{width: '100px'}}>\n            <Button type=\"submit\" label={'Add'}/>\n          </div>\n        </div>\n      </form>\n    </div>\n  )\n}\n\ninterface Item {\n  name: string\n  expirationDate: Date\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport {App} from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\nimport PrimeReact from 'primereact/api'\nimport i18n from 'i18next'\nimport {initReactI18next} from 'react-i18next'\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport ja from './locales/ja/translation.json'\n\n// enable primereact ripple animations\nPrimeReact.ripple = true\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    debug: true,\n    parseMissingKeyHandler: (key) => key,\n    resources: {\n      ja: {translation: ja},\n    },\n    react: {\n      useSuspense: false,\n    },\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  })\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}